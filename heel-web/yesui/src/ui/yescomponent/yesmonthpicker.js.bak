(function(){
	YIUI.Yes_MonthPicker = function(options){
		var Return = {
			el: $("<div></div>"),
			formatStr: "yyyy-MM",
			id: "",
			dropView: $("<div class='mp-vw'></div>"),
			enable: true,
			commitValue : $.noop,
			doFocusOut: $.noop,
			selectValue: null,
			_hasShow : false,
			_needShow : false,
			init : function(){
				this.id = this.id || this.el.attr("id");
				this._input = $("<input type='text' class='txt'>").appendTo(this.el);
		        this._btn = $("<span class='arrow'></span>").appendTo(this.el);
		        this.initMonthPicker();
		        this.temp = "";
			},
			isEnable : function(){
				return true;
			},
			getEl: function() {
                return this.el;
            },
			getInput : function() {
                return this._input;
            },
            getBtn : function() {
                return this._btn;
            },
            getDropView : function() {
                return  this.dropView;
            },
            setText : function(value){
            	this._input.val(value);
            	this.el.attr("title", value);
            	this.temp = value;
            },
            getText: function () {
                return this._input.val();
            },
            focus : function(){
            	this._input.focus();
            },
			initMonthPicker : function(){
				this.getInput().attr("id","mpInput_"+this.id);
				this.getInput().DateTimeMask({masktype: 6});
				this.getBtn().attr("id","mpImg_"+this.id);
				this.install();
			},
			install : function(){
				var self = this;
				this.getBtn().mousedown(function(e){
					self._needShow =  !self._hasShow ? true : false; 
				}).click(function(e){
					if(!self.isEnable()){
						return;
					}
					self._input.addClass("focus");
					self.getInput().focus();
					if(self._hasShow){
						self.hideDateView();
						return;
					}
					self.initDropView();
					$(document.body).append(self.dropView);
					
					if (self.getInput().val()) {
                        self.dropView.MonthPickerSetDate(self.getInput().val(), true);
                    } else {
                        self.dropView.MonthPickerSetDate((new Date()).Format(self.formatStr));
                    }
					
					YIUI.PositionUtil.setViewPos(self.getInput(), self.dropView, false);
					self.dropView.slideDown(200, function(){
						$(document).on('mousedown', function(e){
							var target = $(e.target);
							if ((target.closest(self.dropView).length == 0) 
								&& (target.closest(self.getBtn()).length == 0) 
								&& (target.closest(self.getInput()).length == 0)) {
		                        	self.hideDateView();
		                            $(document).off("mousedown");
		                        }
						});
					});
					self._hasShow = true;
					self._needShow = false;
					e.stopPropagation();
				});
				
				
				$("input", self.el).bind("blur", function(e){
					if(!self.isEnable() || self._needShow || self._hasShow){
						return;
					}

					var text = self.getInput().val();
					if(text != self.temp){
						self.temp = text;
						self.commitValue(text.replace(/-/g,""));
					}
					self.doFocusOut();
				});
			},
			setValue: function(value){
				this.selectValue = value;
            },
			setWidth : function(width){
				this.el.css('width', width);
				this.getInput().css('width', width);
			},
			setHeight : function(height){
				this.el.css("height", height);
				this.getInput().css("height", height);
			},
			setEditable: function (editable) {
                this.editable = editable;
                var el = this.getInput();
                if (this.editable) {
                    el.removeAttr('readonly');
                } else {
                    el.attr('readonly', 'readonly');
                }
            },
			initDropView : function(){
				this.dropView = $("<div class='mp-vw'></div>");
                this.dropView.attr("id", this.id + "_monthPickerView");
                this.dropView.html("");
                var self = this;
                this.dropView.MonthPicker({
                    flat: true,
                    format: self.formatStr,
                    date: [new Date()],
                    current: self.getInput().val(),
                    starts: 7,
                    onChange: function (formated, selectValue) {
                    	self.selectValue = Number(selectValue);
                        self.getInput().val(formated);
                        self.hideDateView();
                    }
                });
			},
			hideDateView : function(){
				this.dropView.remove();
				this._input.removeClass("focus");
				this.commitValue(this.selectValue);
				this._hasShow = false;
			}
		};
		Return = $.extend(Return, options);
		if(!options.isPortal) {
        	Return.init();
        }
        return Return;
	}
})();